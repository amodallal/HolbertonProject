{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ai-Finetuning\\\\gemini-ui\\\\src\\\\GeminiChatBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GEMINI_ENDPOINT = 'http://localhost:11434'; //'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent';\nconst GEMINI_API_KEY = 'AIzaSyD0ZQiR56gas1Kxnq_fEwv3Ku9M_KH4Zo8'; // Replace with your actual Gemini API key\n\nconst GeminiChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const sendMessage = async () => {\n    console.log(\"🧪 sendMessage function was triggered\");\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      role: 'user',\n      content: input\n    }];\n    setMessages(newMessages);\n    setInput('');\n    setLoading(true);\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      console.log(\"🚀 Sending to Gemini API:\", input); // <--- Add this\n      const res = await fetch(`${GEMINI_ENDPOINT}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            role: 'user',\n            parts: [{\n              text: input\n            }]\n          }]\n        })\n      });\n      const data = await res.json();\n      console.log(\"🤖 Gemini response raw:\", data); // <--- Add this\n\n      const reply = ((_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || 'No response';\n      const updated = [...newMessages, {\n        role: 'model',\n        content: reply\n      }];\n      setMessages(updated);\n\n      // 🔍 Log the prompt and response\n      const pair = {\n        prompt: input,\n        response: reply\n      };\n      console.log(\"📤 Sending to Flask:\", pair);\n      const saveRes = await fetch('http://localhost:8000/save', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(pair)\n      });\n      const saveResult = await saveRes.json();\n      console.log(\"✅ Flask responded:\", saveResult);\n    } catch (err) {\n      console.error('❌ Gemini or Flask error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border rounded p-4 h-96 overflow-y-scroll mb-4 bg-white shadow\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `mb-2 ${msg.role === 'user' ? 'text-right' : 'text-left'}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `inline-block px-3 py-2 rounded whitespace-pre-wrap text-left max-w-full break-words ${msg.role === 'user' ? 'bg-blue-200' : 'bg-gray-200'}`,\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500\",\n        children: \"Gemini is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"flex-1 border rounded p-2\",\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && sendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(GeminiChatBox, \"QcbopfskvOtpvx/BuTIYXPrHv4s=\");\n_c = GeminiChatBox;\nexport default GeminiChatBox;\nvar _c;\n$RefreshReg$(_c, \"GeminiChatBox\");","map":{"version":3,"names":["React","useState","ReactMarkdown","jsxDEV","_jsxDEV","GEMINI_ENDPOINT","GEMINI_API_KEY","GeminiChatBox","_s","messages","setMessages","input","setInput","loading","setLoading","sendMessage","console","log","trim","newMessages","role","content","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","res","fetch","method","headers","body","JSON","stringify","contents","parts","text","data","json","reply","candidates","updated","pair","prompt","response","saveRes","saveResult","err","error","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["D:/Ai-Finetuning/gemini-ui/src/GeminiChatBox.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nconst GEMINI_ENDPOINT = 'http://localhost:11434'//'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent';\r\nconst GEMINI_API_KEY = 'AIzaSyD0ZQiR56gas1Kxnq_fEwv3Ku9M_KH4Zo8'; // Replace with your actual Gemini API key\r\n\r\nconst GeminiChatBox = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const sendMessage = async () => {\r\n    console.log(\"🧪 sendMessage function was triggered\");\r\n  if (!input.trim()) return;\r\n\r\n  const newMessages = [...messages, { role: 'user', content: input }];\r\n  setMessages(newMessages);\r\n  setInput('');\r\n  setLoading(true);\r\n\r\n  try {\r\n    console.log(\"🚀 Sending to Gemini API:\", input); // <--- Add this\r\n    const res = await fetch(`${GEMINI_ENDPOINT}?key=${GEMINI_API_KEY}`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        contents: [{ role: 'user', parts: [{ text: input }] }]\r\n      })\r\n    });\r\n\r\n    const data = await res.json();\r\n    console.log(\"🤖 Gemini response raw:\", data); // <--- Add this\r\n\r\n    const reply = data.candidates?.[0]?.content?.parts?.[0]?.text || 'No response';\r\n\r\n    const updated = [...newMessages, { role: 'model', content: reply }];\r\n    setMessages(updated);\r\n\r\n    // 🔍 Log the prompt and response\r\n    const pair = { prompt: input, response: reply };\r\n    console.log(\"📤 Sending to Flask:\", pair);\r\n\r\n    const saveRes = await fetch('http://localhost:8000/save', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(pair)\r\n    });\r\n\r\n    const saveResult = await saveRes.json();\r\n    console.log(\"✅ Flask responded:\", saveResult);\r\n\r\n  } catch (err) {\r\n    console.error('❌ Gemini or Flask error:', err);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"max-w-xl mx-auto p-4\">\r\n      <div className=\"border rounded p-4 h-96 overflow-y-scroll mb-4 bg-white shadow\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`mb-2 ${msg.role === 'user' ? 'text-right' : 'text-left'}`}>\r\n            <span className={`inline-block px-3 py-2 rounded whitespace-pre-wrap text-left max-w-full break-words ${msg.role === 'user' ? 'bg-blue-200' : 'bg-gray-200'}`}>\r\n              <ReactMarkdown>{msg.content}</ReactMarkdown>\r\n            </span>\r\n          </div>\r\n        ))}\r\n        {loading && <p className=\"text-gray-500\">Gemini is thinking...</p>}\r\n      </div>\r\n      <div className=\"flex gap-2\">\r\n        <input\r\n          className=\"flex-1 border rounded p-2\"\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\r\n        />\r\n       <button\r\n  className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\r\n  onClick={sendMessage}\r\n>\r\n  Send\r\n</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeminiChatBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}